generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Rating {
  id           String         @id
  rate         Int
  comment      String?
  restaurantId Int?
  restaurant   RestaurantV2? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  postDate DateTime @default(now())
  imageUrl String?
}

model Images {
  id           Int         @id @default(autoincrement())
  URL          String
  restaurantId Int?
  restaurant   RestaurantV2? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Collection {
  id             Int          @id @default(autoincrement())
  collectionName String       @unique
  description    String?
  routeName      String?      @unique
  Restaurant     RestaurantV2[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username String? @unique
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  rating Rating[]
  bookmark RestaurantV2[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AddressComponentV2 {
  id Int @id @default(autoincrement())
  long_name String @unique
  short_name String @unique
  types String
  restaurant RestaurantV2[]
}

model OpeningHoursV2 {
  id Int @id @default(autoincrement())
  monday String?
  tuesday String?
  wednesday String?
  thursday String?
  friday String?
  saturday String?
  sunday String?
  restaurant RestaurantV2 @relation(fields: [restaurantId], references: [id])
  restaurantId Int @unique
}

model GeometryV2 {
  id Int @id @default(autoincrement())
  lat Float?
  lng Float?
  restaurant RestaurantV2 @relation(fields: [restaurantId], references: [id])
  restaurantId Int @unique
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  icon String?
  header String?
  restaurants RestaurantV2[]
}

model RestaurantV2 {
  id Int @id @default(autoincrement())
  curbside_pickup Boolean?
  delivery Boolean?
  dine_in Boolean?
  formatted_address String?
  formatted_phone_number String?
  gofood_name String?
  icon String?
  icon_mask_base_uri String?
  international_phone_number String?
  name String?
  permanently_closed String?
  place_id String? @unique
  price_level Int?
  rating Float?
  reference String?
  reservable Boolean?
  serves_beer Boolean?
  serves_breakfast Boolean?
  serves_brunch Boolean?
  serves_dinner Boolean?
  serves_lunch Boolean?
  serves_vegetarian_food Boolean?
  serves_wine Boolean?
  takeout Boolean?
  thumbnail String?
  types String[]
  url String?
  user_ratings_total Int?
  vicinity String?
  website String?
  wheelchair_accessible_entrance Boolean?
  address_components AddressComponentV2[]
  opening_hours OpeningHoursV2?
  geometry GeometryV2?
  categories Category[]
  Ratings Rating[]
  Images Images[]
  Collections Collection[]
  bookmarkedBy User[]
  menu Menu? 
}

model Menu{
  id Int @id @default(autoincrement())
  image String?
  menu_type String?
  restaurant RestaurantV2 @relation(fields: [restaurantId], references: [id])
  restaurantId Int @unique
}