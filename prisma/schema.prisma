generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  locationBroad String
  location      String
  priceRange    String
  openTime      DateTime
  closeTime     DateTime
  routeName     String?      @unique
  featureImage  Images[]
  information   Information?
  rating        Rating[]
  category      Category[]
  Collection    Collection[]
  userBookmark User[]
}

model Category {
  id           Int          @id @default(autoincrement())
  categoryName String       @unique
  routeName    String?      @unique
  restaurant   Restaurant[]
}

model Information {
  id            Int        @id @default(autoincrement())
  restaurantId  Int        @unique
  smoking       Boolean    @default(false)
  takeOut       Boolean    @default(false)
  wifi          Boolean    @default(false)
  indoorSeating Boolean    @default(false)
  prayingRoom   Boolean    @default(false)
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Rating {
  id           String         @id
  rate         Int
  comment      String?
  restaurantId Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  postDate DateTime @default(now())
  imageUrl String?
}

model Images {
  id           Int         @id @default(autoincrement())
  URL          String
  restaurantId Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Collection {
  id             Int          @id @default(autoincrement())
  collectionName String       @unique
  description    String?
  routeName      String?      @unique
  Restaurant     Restaurant[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username String? @unique
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  rating Rating[]
  bookmark Restaurant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
